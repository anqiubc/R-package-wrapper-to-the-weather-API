resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, as = "text", encoding = "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-08")
#(1)data
#location data
res$location_data
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "text", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "text", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
#(1)data
#location data
res$location_data
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt))
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json"
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- httr::GET(base_url, query = list(key=key,q=q,dt=dt))
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
#(1)data
#location data
res$location_data
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json"
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- httr::GET(base_url, query = list(key=key,q=q,dt=dt))
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"))
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
load_all()
library(devtools)
load_all()
get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
load_all()
get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_astro_infomation("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_astro_infomation("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_astro_information("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12",0)
get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12",24)
exists("get_history_hourly_weather", where = globalenv(), inherits = FALSE)
check()
check()
usethis::use_package("httr")
usethis::use_package("jsonlite")
check()
check()
check()
check()
use_mit_license()
document()
document()
document()
?get_history_hourly_weather
?get_history_hourly_weather
document()
check()
install()
library(demo)
use_testthat()
use_test("get_history_astro_information")
load_all()
library(devtoos)
library(devtools)
load_all()
usethis::use_vignette("my-vignette")
get_history_astro_information("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
df<-get_history_astro_information("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
summary(df)
df2<-get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
summary(df2)
df3<-get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12",23)
summary(df3)
df3
df2<-get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
df2
df2$maxtemp_c
df2[["maxtemp_c"]]
df2["maxtemp_c"]
type(df2["maxtemp_c"])
class(df2["maxtemp_c"])
df2$maxtemp_c[1]
df2$maxtemp_c[1][1]
df2$maxtemp_c[[1]]
as.numeric(df2$maxtemp_c)
class(as.numeric(df2$maxtemp_c))
class(df2$maxtemp_c))
class(df2$maxtemp_c)
class(df2$maxtemp_c)
print(min)
get_history_daily_weather<- function(key,q,dt) {
df <- data.frame()
base_url <- "http://api.weatherapi.com/v1/history.json"
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- httr::GET(base_url, query = list(key=key,q=q,dt=dt))
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"), simplifyVector = FALSE)
if (httr::http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
return(as.data.frame(parsed[[2]]$forecastday[[1]]$day))
}
library(ggplot2)
min<- vector()
max<- vector()
dates<-c("2022-02-10","2022-02-11","2022-02-12","2022-02-13","2022-02-14","2022-02-15","2022-02-16")
for(i in seq_along(dates)){
append(max,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$maxtemp_c)
append(min,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$mintemp_c)
}
print(min)
get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-14")$maxtemp_c
library(ggplot2)
min<- vector()
max<- vector()
dates<-c("2022-02-10","2022-02-11","2022-02-12","2022-02-13","2022-02-14","2022-02-15","2022-02-16")
for(i in seq_along(dates)){
max<-append(max,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$maxtemp_c)
min<-append(min,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$mintemp_c)
}
print(min)
print(max)
df
df <- data.frame(max, min)
df
df <- data.frame(dates,max, min)
df
ggplot(df, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
mdf <- melt(df,id.vars="Week")
ggplot(mdf, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
mdf <- melt(df,id.vars="dates")
mdf <- melt(df,id.vars="dates")
ggplot(mdf, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
df <- data.frame(dates,max, min)
mdf <- melt(df,id.vars="dates")
library(reshape2)
mdf <- melt(df,id.vars="dates")
ggplot(mdf, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
library(ggplot2)
library(reshape2)
min_temp<- vector()
max_temp<- vector()
dates<-c("2022-02-10","2022-02-11","2022-02-12","2022-02-13","2022-02-14","2022-02-15","2022-02-16")
for(i in seq_along(dates)){
max_temp<-append(max,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$maxtemp_c)
min_temp<-append(min,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$mintemp_c)
}
df <- data.frame(dates,max_temp, min_temp)
mdf <- melt(df,id.vars="dates")
ggplot(mdf, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
library(ggplot2)
library(reshape2)
min_temp<- vector()
max_temp<- vector()
dates<-c("2022-02-10","2022-02-11","2022-02-12","2022-02-13","2022-02-14","2022-02-15","2022-02-16")
for(i in seq_along(dates)){
max_temp<-append(max,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$maxtemp_c)
min_temp<-append(min,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$mintemp_c)
}
df <- data.frame(dates,max_temp, min_temp)
mdf <- melt(df,id.vars="dates")
ggplot(mdf, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
library(ggplot2)
library(reshape2)
min_temp<- vector()
max_temp<- vector()
dates<-c("2022-02-10","2022-02-11","2022-02-12","2022-02-13","2022-02-14","2022-02-15","2022-02-16")
for(i in seq_along(dates)){
max_temp<-append(max_temp,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$maxtemp_c)
min_temp<-append(min_temp,get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London",dates[i])$mintemp_c)
}
df <- data.frame(dates,max_temp, min_temp)
mdf <- melt(df,id.vars="dates")
ggplot(mdf, aes(x=dates, y=value, colour=variable, group=variable )) +
geom_line()
df3
temp<- vector()
hours<-0:23
for(i in seq_along(hours)){
temp<-append(temp,get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-14",hours[i])$temp_c)
}
df <- data.frame(hours,temp)
ggplot(df, aes(x=hours, y=temp)) +
geom_line()
library(ggplot2)
library(reshape2)
temp<- vector()
hour<-0:23
for(i in seq_along(hours)){
temp<-append(temp,get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-14",hour[i])$temp_c)
}
df <- data.frame(hour,temp)
ggplot(df, aes(x=hour, y=temp)) +
geom_line()
temp
