use_git()
library(devtools)
use_git()
use_r("weather_api_history")
library(devtools)
use_r("weather_api_history")
E
load_all()
weather_api_history("##samplekeyhere##","London","2022-02-08")
load_all()
weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-10")
weather_api_history(1b9ca6d6b4914dfa8d5231606221402,"London","2022-02-10")
weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-10")
load_all()
weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-10")
library(devtools)
library(httr)
library(jsonlite)
#Set a user agent
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, as = "text", encoding = "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-08")
#(1)data
#location data
res$location_data
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "text", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "text", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
#(1)data
#location data
res$location_data
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed", "UTF-8"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt),encode = "raw")
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json?"
full_url <- POST(base_url, query = list(key=key,q=q,dt=dt))
print(full_url)
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- GET(full_url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
ua <- user_agent("https://github.com/anqiubc")
ua
#weather_api_history function
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json"
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- httr::GET(base_url, query = list(key=key,q=q,dt=dt))
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp,  "parsed"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
#(1)data
#location data
res$location_data
weather_api_history <- function(key,q,dt) {
base_url <- "http://api.weatherapi.com/v1/history.json"
path<-paste0("key=",key,"&q=",q,"&dt=",dt)
resp <- httr::GET(base_url, query = list(key=key,q=q,dt=dt))
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"))
if (http_error(resp)) {
stop(
sprintf(
"GitHub API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$error$message,
parsed$error$code
),
call. = FALSE
)
}
structure(
list(
location_data= parsed[[1]],
daily_data = parsed[[2]]$forecastday[[1]]$day,
astro_data= parsed[[2]]$forecastday[[1]]$astro,
hourly_data=parsed[[2]]$forecastday[[1]]$hour,
path = path,
response = resp,
class = "weather_api_history"
)
)
}
#use case:
res<-weather_api_history("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
load_all()
library(devtools)
load_all()
get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
load_all()
get_history_daily_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_astro_infomation("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_astro_infomation("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_astro_information("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12")
get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12",0)
get_history_hourly_weather("1b9ca6d6b4914dfa8d5231606221402","London","2022-02-12",24)
exists("get_history_hourly_weather", where = globalenv(), inherits = FALSE)
check()
check()
usethis::use_package("httr")
usethis::use_package("jsonlite")
check()
check()
check()
check()
use_mit_license()
document()
document()
document()
?get_history_hourly_weather
?get_history_hourly_weather
document()
check()
install()
library(demo)
use_testthat()
use_test("get_history_astro_information")
